@page "/documents"
@using DocumentOcrProcessor.Models
@using DocumentOcrProcessor.Services
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ICosmosDbService CosmosDbService
@inject NavigationManager NavigationManager

<PageTitle>Documents</PageTitle>

<h1>Document Review</h1>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="statusFilter" class="form-label">Filter by Status:</label>
        <select id="statusFilter" class="form-select" @onchange="OnStatusFilterChanged">
            <option value="">All Documents</option>
            <option value="Pending">Pending Review</option>
            <option value="Reviewed">Reviewed</option>
        </select>
    </div>
</div>

@if (isLoading)
{
    <p><em>Loading documents...</em></p>
}
else if (documents == null || !documents.Any())
{
    <div class="alert alert-info">No documents found.</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Document Number</th>
                <th>Identifier</th>
                <th>Original File Name</th>
                <th>Pages</th>
                <th>Status</th>
                <th>Assigned To</th>
                <th>Processed At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in documents)
            {
                <tr>
                    <td>@doc.DocumentNumber</td>
                    <td>@doc.Identifier</td>
                    <td>@doc.OriginalFileName</td>
                    <td>@doc.PageCount</td>
                    <td>
                        <span class="badge @GetStatusBadgeClass(doc.ReviewStatus)">
                            @doc.ReviewStatus
                        </span>
                    </td>
                    <td>@(doc.AssignedTo ?? "Unassigned")</td>
                    <td>@doc.ProcessedAt.ToString("yyyy-MM-dd HH:mm")</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => ReviewDocument(doc.Id, doc.Identifier)">
                            Review
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DocumentOcrEntity>? documents;
    private bool isLoading = true;
    private string? selectedStatus;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocuments();
    }

    private async Task LoadDocuments()
    {
        isLoading = true;
        try
        {
            documents = await CosmosDbService.GetDocumentsAsync(selectedStatus, maxItems: 100);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading documents: {ex.Message}");
            documents = new List<DocumentOcrEntity>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnStatusFilterChanged(ChangeEventArgs e)
    {
        selectedStatus = string.IsNullOrEmpty(e.Value?.ToString()) ? null : e.Value.ToString();
        await LoadDocuments();
    }

    private void ReviewDocument(string id, string identifier)
    {
        NavigationManager.NavigateTo($"/review/{id}/{identifier}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning",
            "Reviewed" => "bg-success",
            _ => "bg-secondary"
        };
    }
}
