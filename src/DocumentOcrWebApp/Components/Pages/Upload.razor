@page "/upload"
@using Microsoft.AspNetCore.Authorization
@using DocumentOcrWebApp.Services
@using DocumentOcrProcessor.Services
@inject IOperationsApiService OperationsApi
@inject IBlobStorageService BlobStorage
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@attribute [Authorize]

<PageTitle>Upload Documents</PageTitle>

<div class="container">
    <div class="row mb-3">
        <div class="col">
            <h1>Upload Documents</h1>
            <p class="text-muted">Upload PDF files to start document extraction (up to 10 files)</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Select PDF Files</h5>
                    
                    <div class="mb-3">
                        <label for="fileUpload" class="form-label">Choose PDF files to upload (up to 10)</label>
                        <InputFile id="fileUpload" 
                                   class="form-control" 
                                   OnChange="HandleFilesSelected" 
                                   accept=".pdf"
                                   multiple
                                   disabled="@isUploading" />
                        @if (selectedFiles.Any())
                        {
                            <div class="mt-2">
                                <small class="text-muted">@selectedFiles.Count file(s) selected</small>
                                <ul class="list-group mt-1">
                                    @foreach (var file in selectedFiles)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center py-2">
                                            <span>
                                                <i class="bi bi-file-earmark-pdf text-danger"></i> @file.Name
                                            </span>
                                            <span class="badge bg-secondary">@FormatFileSize(file.Size)</span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label for="identifierField" class="form-label">Identifier Field Name (Optional)</label>
                        <input type="text" 
                               id="identifierField" 
                               class="form-control" 
                               @bind="identifierFieldName" 
                               placeholder="identifier"
                               disabled="@isUploading" />
                        <div class="form-text">
                            The field name used to group pages into documents (default: "identifier")
                        </div>
                    </div>

                    <div class="d-grid gap-2">
                        <button class="btn btn-primary btn-lg" 
                                @onclick="UploadFiles" 
                                disabled="@(!selectedFiles.Any() || isUploading)">
                            @if (isUploading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Uploading @currentFileIndex of @selectedFiles.Count...</span>
                            }
                            else
                            {
                                <i class="bi bi-cloud-upload me-2"></i>
                                <span>Upload and Start Extraction (@selectedFiles.Count file@(selectedFiles.Count != 1 ? "s" : ""))</span>
                            }
                        </button>
                    </div>

                    @if (isUploading)
                    {
                        <div class="progress mt-3" style="height: 25px;">
                            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                 role="progressbar" 
                                 style="width: @uploadProgress%"
                                 aria-valuenow="@uploadProgress" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                                @uploadProgress%
                            </div>
                        </div>
                        <div class="text-center mt-2">
                            <small class="text-muted">@uploadStatus</small>
                        </div>
                    }

                    @if (uploadResults.Any())
                    {
                        <div class="mt-3">
                            <h6>Upload Results:</h6>
                            <ul class="list-group">
                                @foreach (var result in uploadResults)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-start">
                                        <div class="ms-2 me-auto">
                                            <div class="fw-bold">@result.FileName</div>
                                            @if (result.Success)
                                            {
                                                <small class="text-success">✓ Uploaded successfully - Operation started</small>
                                            }
                                            else
                                            {
                                                <small class="text-danger">✗ Failed: @result.Error</small>
                                            }
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card bg-light">
                <div class="card-body">
                    <h5 class="card-title"><i class="bi bi-info-circle"></i> How it works</h5>
                    <ol class="small">
                        <li>Select one or more PDF files (up to 10)</li>
                        <li>Optionally specify an identifier field name</li>
                        <li>Click "Upload and Start Extraction"</li>
                        <li>Each file will be uploaded to storage</li>
                        <li>A separate extraction operation will start for each file</li>
                        <li>You'll be redirected to the Operations page to monitor progress</li>
                    </ol>
                    <hr />
                    <h6>Multiple Files</h6>
                    <p class="small">
                        You can upload up to 10 PDF files at once. Each file will be processed independently 
                        with its own operation, allowing parallel processing for faster results.
                    </p>
                    <hr />
                    <h6>Identifier Field</h6>
                    <p class="small">
                        The identifier field is used to group pages with the same identifier value into a single document. 
                        For example, if pages 1 and 5 both have "documentId: 12345", they will be grouped together.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<IBrowserFile> selectedFiles = new();
    private string identifierFieldName = "identifier";
    private bool isUploading = false;
    private string? errorMessage;
    private string? successMessage;
    private int uploadProgress = 0;
    private string uploadStatus = "";
    private int currentFileIndex = 0;
    private List<UploadResult> uploadResults = new();
    private const long MaxFileSize = 50 * 1024 * 1024; // 50 MB
    private const int MaxFileCount = 10;

    private void HandleFilesSelected(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        uploadResults.Clear();
        errorMessage = null;
        successMessage = null;

        var files = e.GetMultipleFiles(MaxFileCount);

        // Validate files
        foreach (var file in files)
        {
            if (file.Size > MaxFileSize)
            {
                errorMessage = $"File '{file.Name}' exceeds the maximum allowed size of {FormatFileSize(MaxFileSize)}";
                continue;
            }
            
            if (!file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                errorMessage = $"File '{file.Name}' is not a PDF file. Only PDF files are allowed.";
                continue;
            }

            selectedFiles.Add(file);
        }

        if (selectedFiles.Count == 0 && !string.IsNullOrEmpty(errorMessage))
        {
            // All files were invalid
            return;
        }

        if (selectedFiles.Count > MaxFileCount)
        {
            errorMessage = $"You can only upload up to {MaxFileCount} files at once";
            selectedFiles = selectedFiles.Take(MaxFileCount).ToList();
        }

        if (selectedFiles.Any() && string.IsNullOrEmpty(errorMessage))
        {
            successMessage = $"{selectedFiles.Count} file(s) ready to upload";
        }
    }

    private async Task UploadFiles()
    {
        if (!selectedFiles.Any())
        {
            errorMessage = "Please select at least one file to upload";
            return;
        }

        isUploading = true;
        errorMessage = null;
        successMessage = null;
        uploadProgress = 0;
        uploadStatus = "";
        uploadResults.Clear();
        currentFileIndex = 0;

        var containerName = Configuration["Upload:ContainerName"] ?? "uploaded-pdfs";
        var successfulUploads = 0;

        try
        {
            for (int i = 0; i < selectedFiles.Count; i++)
            {
                var file = selectedFiles[i];
                currentFileIndex = i + 1;
                
                uploadStatus = $"Uploading file {currentFileIndex} of {selectedFiles.Count}: {file.Name}";
                uploadProgress = (int)((double)i / selectedFiles.Count * 100);
                StateHasChanged();

                try
                {
                    // Generate a unique blob name
                    var timestamp = DateTime.UtcNow.ToString("yyyyMMdd-HHmmss");
                    var fileName = Path.GetFileNameWithoutExtension(file.Name);
                    var extension = Path.GetExtension(file.Name);
                    var blobName = $"{timestamp}-{fileName}{extension}";

                    // Upload file to blob storage
                    using (var stream = file.OpenReadStream(MaxFileSize))
                    {
                        await BlobStorage.UploadBlobAsync(containerName, blobName, stream, overwrite: false);
                    }

                    // Start the extraction operation
                    var operation = await OperationsApi.StartOperationAsync(
                        blobName, 
                        containerName, 
                        string.IsNullOrWhiteSpace(identifierFieldName) ? null : identifierFieldName);

                    uploadResults.Add(new UploadResult
                    {
                        FileName = file.Name,
                        Success = true,
                        OperationId = operation.OperationId
                    });

                    successfulUploads++;
                }
                catch (Exception ex)
                {
                    uploadResults.Add(new UploadResult
                    {
                        FileName = file.Name,
                        Success = false,
                        Error = ex.Message
                    });
                }
            }

            uploadProgress = 100;
            uploadStatus = $"Complete! Successfully uploaded {successfulUploads} of {selectedFiles.Count} file(s)";
            StateHasChanged();

            if (successfulUploads > 0)
            {
                // Wait a moment for the user to see the results
                await Task.Delay(2000);

                // Redirect to operations page
                Navigation.NavigateTo("/operations");
            }
            else
            {
                errorMessage = "Failed to upload any files. Please check the errors above and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            uploadProgress = 0;
            uploadStatus = "";
        }
        finally
        {
            isUploading = false;
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private class UploadResult
    {
        public string FileName { get; set; } = string.Empty;
        public bool Success { get; set; }
        public string? OperationId { get; set; }
        public string? Error { get; set; }
    }
}
